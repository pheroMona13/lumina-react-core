const fs = require("fs");
const path = require("path");

const SRC_DIR = path.resolve(__dirname, "../assets/icons");
const OUT_FILE = path.resolve(SRC_DIR, "index.ts");

// 1. Find all SVG files
const files = fs.readdirSync(SRC_DIR).filter((f) => f.endsWith(".svg"));

// 2. Build lines for imports
const importLines = files.map((file) => {
  const base = path.basename(file, ".svg"); // e.g. "keyboard_arrow_down"
  const pascal = normalizeName(base) + "Icon"; // e.g. "KeyboardArrowDownIcon"
  return `import ${pascal} from './${file}';`;
});

// 3. Build lines for imports & exports
const exportLines = files.map((file) => {
  const base = path.basename(file, ".svg"); // e.g. "keyboard_arrow_down"
  const pascal = normalizeName(base) + "Icon"; // e.g. "KeyboardArrowDownIcon"
  return pascal;
});

// 4. Build the union type, e.g. 'home' | 'search' | 'keyboard_arrow_down'
const iconNames = files.map((f) => `'${path.basename(f, ".svg")}'`);
const unionType = `export type IconName = ${iconNames.join(" | ")};\n`;

// 5. Build the runtime map
const mapLines = [
  ...files.map((file) => {
    const base = path.basename(file, ".svg");
    const pascal = normalizeName(base) + "Icon";
    return `  '${base}': ${pascal},`;
  }),
];
const mapBlock = [
  "export const iconMap: Record<IconName, React.FC<React.SVGProps<SVGSVGElement>>> = {",
  ...mapLines,
  "};",
];

// 6. Write `src/icons/index.ts`
const out = [
  "// AUTO-GENERATED by scripts/generate-icons.js. DO NOT EDIT.",
  "",
  "import * as React from 'react'",
  ...importLines,
  "",
  `export { ${exportLines.join(', ')} }`,
  "",
  unionType,
  ...mapBlock,
].join("\n");

function normalizeName(name) {
  return name
    .split("_")
    .map((part) => {
      return String(part).charAt(0).toUpperCase() + String(part).slice(1);
    })
    .join("");
}

fs.writeFileSync(OUT_FILE, out);
console.log(`âœ… Generated ${files.length} icons in ${OUT_FILE}`);
